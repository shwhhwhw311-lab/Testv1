-- Mega Mansion Tycoon Auto TP Pumpkins Hub using Rayfield UI (Updated for Fall TP, Delay, & Ignore Paths)
-- Features: Toggleable Auto Teleport to Pumpkins (scans folder or entire workspace)
-- Teleports 10 studs above each pumpkin, lets player fall for collection, then waits delay before next.
-- Ignores specific paths: children[3] and [4] of workspace["Zednov's Tycoon Kit"].Tycoons.Blue.PurchasedObjects.Level1.Floor1.Part
-- Removed notifications.
-- Place in executor; works in-game.
-- Note: Fan-made; use responsibly, may lag or trigger anti-cheat.

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local autoTpEnabled = false
local fullWorkspaceScan = false  -- Toggle for scanning entire workspace
local tpDelay = 1  -- Default delay between TPs in seconds
local tpConnection = nil
local collected = {}  -- Synced from rewards event

local rewardsEvent = ReplicatedStorage:WaitForChild("Net"):WaitForChild("RE/Szn_RewardsEvent")

local Window = Rayfield:CreateWindow({
   Name = "MMT Auto TP Hub",
   LoadingTitle = "Loading Pumpkin Tools",
   LoadingSubtitle = "Mega Mansion Tycoon",
   ConfigurationSaving = {Enabled = true, FolderName = nil, FileName = "MMTHub"},
   KeySystem = false
})

-- Hook rewards event to update collected
rewardsEvent.OnClientEvent:Connect(function(data)
   if data and data.Findables then
      for id, _ in pairs(data.Findables) do
         collected[id] = true
      end
      print("Updated collected pumpkins from server!")
   end
end)

-- Function to teleport to pumpkin (10 studs above, fall for collection)
local function tpToPumpkin(pumpkin)
   local character = player.Character
   if not character or not character:FindFirstChild("HumanoidRootPart") then return end
   local rootPart = character.HumanoidRootPart
   rootPart.CFrame = pumpkin.CFrame + Vector3.new(0, 10, 0)  -- TP 10 studs above to fall
end

-- Function to check if object should be ignored
local function isIgnored(obj)
   local ignorePart = workspace:FindFirstChild("Zednov's Tycoon Kit")
   if ignorePart then
      ignorePart = ignorePart:FindFirstChild("Tycoons")
      if ignorePart then
         ignorePart = ignorePart:FindFirstChild("Blue")
         if ignorePart then
            ignorePart = ignorePart:FindFirstChild("PurchasedObjects")
            if ignorePart then
               ignorePart = ignorePart:FindFirstChild("Level1")
               if ignorePart then
                  ignorePart = ignorePart:FindFirstChild("Floor1")
                  if ignorePart then
                     ignorePart = ignorePart:FindFirstChild("Part")
                     if ignorePart then
                        local children = ignorePart:GetChildren()
                        -- Ignore children[3] and [4] if they exist
                        if #children >= 4 and (obj == children[3] or obj == children[4]) then
                           return true
                        end
                     end
                  end
               end
            end
         end
      end
   end
   return false
end

-- Scan function (folder or full workspace)
local function scanPumpkins()
   local pumpkins = {}
   if fullWorkspaceScan then
      -- Full workspace scan for any Part/BasePart with numeric name or "Pumpkin*"
      for _, obj in pairs(workspace:GetDescendants()) do
         if (obj:IsA("BasePart") or obj:IsA("Part")) and (obj.Name:match("^%d+$") or obj.Name:match("^Pumpkin")) and not collected[obj.Name] and not isIgnored(obj) then
            table.insert(pumpkins, obj)
         end
      end
   else
      -- Primary: Scan workspace.Pumpkins for numbered children (e.g., "104", "133")
      local pumpkinsFolder = workspace:FindFirstChild("Pumpkins")
      if pumpkinsFolder then
         for _, obj in pairs(pumpkinsFolder:GetChildren()) do
            if obj.Name:match("^%d+$") and not collected[obj.Name] and not isIgnored(obj) then
               table.insert(pumpkins, obj)
            end
         end
      end
   end
   return pumpkins
end

-- Auto TP Loop
local function startAutoTp()
   tpConnection = RunService.Heartbeat:Connect(function()
      if not autoTpEnabled then return end
      local character = player.Character
      if not character or not character:FindFirstChild("HumanoidRootPart") then return end
      
      -- Get current uncollected pumpkins
      local currentPumpkins = scanPumpkins()
      
      if #currentPumpkins > 0 then
         local nextPumpkin = currentPumpkins[1]
         tpToPumpkin(nextPumpkin)
         print("Teleported above " .. nextPumpkin.Name .. " (" .. nextPumpkin:GetFullName() .. ")")
         task.wait(tpDelay)  -- Wait after fall for collection before next TP
      else
         print("All collected! Waiting for respawn...")
         task.wait(5)  -- Respawn delay
      end
   end)
end

-- Toggle Auto TP
local function toggleAutoTp(value)
   autoTpEnabled = value
   if value then
      startAutoTp()
      print("Auto TP Enabled! Delay: " .. tpDelay .. "s")
   else
      if tpConnection then
         tpConnection:Disconnect()
         tpConnection = nil
      end
      print("Auto TP Disabled!")
   end
end

-- Toggle Full Workspace Scan
local function toggleFullScan(value)
   fullWorkspaceScan = value
   if autoTpEnabled then
      print(value and "Switched to Full Workspace" or "Switched to Pumpkins Folder")
   end
end

-- Update TP Delay
local function updateDelay(value)
   tpDelay = value
   if autoTpEnabled then
      print("Delay Updated to " .. value .. "s")
   end
end

-- UI Setup
local FarmTab = Window:CreateTab("Farming", nil)

FarmTab:CreateToggle({
   Name = "Auto TP to Pumpkins (Fall Collect)",
   CurrentValue = false,
   Flag = "AutoTp",
   Callback = toggleAutoTp,
})

FarmTab:CreateToggle({
   Name = "Full Workspace Scan (Loose Pumpkins)",
   CurrentValue = false,
   Flag = "FullScan",
   Callback = toggleFullScan,
})

FarmTab:CreateSlider({
   Name = "TP Delay (After Fall)",
   Range = {0.5, 5},
   Increment = 0.5,
   Suffix = "s",
   CurrentValue = 1,
   Flag = "DelaySlider",
   Callback = updateDelay,
})

FarmTab:CreateButton({
   Name = "Scan & TP to Nearest (Manual)",
   Callback = function()
      local pumpkins = scanPumpkins()
      if #pumpkins == 0 then
         print("No uncollected pumpkins found!")
         return
      end
      
      local nearest, nearestDist = nil, math.huge
      local myPos = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
      if not myPos then return end
      
      for _, pumpkin in pairs(pumpkins) do
         local dist = (myPos - pumpkin.Position).Magnitude
         if dist < nearestDist then
            nearest, nearestDist = pumpkin, dist
         end
      end
      
      if nearest then
         tpToPumpkin(nearest)
         print("Teleported above nearest: " .. nearest.Name .. " (" .. nearestDist .. " studs)")
      end
   end,
})

FarmTab:CreateLabel("Teleports 10 studs above numbered pumpkins (e.g., '104', '133') for fall collection. Syncs collected from rewards event. Ignores specified paths.")

-- Handle respawn
player.CharacterAdded:Connect(function()
   task.wait(1)
end)

print("Updated MMT Auto TP Hub loaded!")
